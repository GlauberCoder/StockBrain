@using StockBrain.Domain.Models
@using StockBrain.Domain.Models.Enums
@using StockBrain.Infra.Repositories.Abstractions

<RadzenRow RowGap="0">
	<SBLabelCol Size="3" Title="Última Revisão" Text="@Asset.LastReview.Date.ToString()" />
	<SBLabelCol Size="3" Title="Última Revisão" Text="@Asset.LastReview.Span.YearMonthFormat()" />
	<RadzenColumn SizeSM="6">
		<RadzenButton Click="@SaveEvaluations" Variant="Variant.Outlined" Text="Avaliar" ButtonStyle="ButtonStyle.Primary" style="float:right;" />
		<a href="@GetInvestidor10URL(Asset)" target="_blank" style="float:right;" class="rz-mx-2">
			<RadzenButton Variant="Variant.Outlined" Text="Investidor10" ButtonStyle="ButtonStyle.Dark" />
		</a>
	</RadzenColumn>
</RadzenRow>

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem">
	<RadzenStack Gap="0">
		<RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
				<RadzenText TextStyle="TextStyle.H6">@Asset.Points() Points</RadzenText>
				<RadzenText TextStyle="TextStyle.H6" class="rz-m-0">@($" {Math.Round(Points)}%")</RadzenText>
			</RadzenStack>
			<RadzenProgressBar @bind-Value=@Points ShowValue="false" Style="--rz-progressbar-height: 1rem;" />
		</RadzenStack>
	</RadzenStack>
	@foreach (var answer in Asset.Factors.Where(f => !f.Factor.IsPortfolio))
	{
		if (answer.Factor.Strategy == DecisionFactorAnswerStrategy.Manual)
		{
			<RadzenStack Gap="0">
				<RadzenRow RowGap="0">
					<RadzenColumn SizeSM="8">
						<RadzenText TextStyle="TextStyle.Overline" title="@answer.Factor.Description">@answer.Factor.Name [@answer.Factor.Strategy]</RadzenText>
					</RadzenColumn>
					<RadzenColumn SizeSM="4" >
						<div class="float-end">
							<RadzenBadge IsPill="true" Variant="Variant.Outlined" BadgeStyle="GetBadgeStyle(answer)" Text="@GetBadgeLabel(answer)" class="float-end rz-ml-4 rz-mt-1" Style="width:30px" />
						<RadzenSelectBar Change="@(() => UpdateData())" TValue="bool?" Size="ButtonSize.ExtraSmall" @bind-Value="@answer.Answer">
							<Items>
								<RadzenSelectBarItem Value="true" Text="Sim" />
								<RadzenSelectBarItem Value="false" Text="Não" />
								<RadzenSelectBarItem Value="null" Text="Não Aplica" />
							</Items>
						</RadzenSelectBar>
						</div>
					</RadzenColumn>
				</RadzenRow>
			</RadzenStack>
		}
		else
		{
			<RadzenStack Gap="0">
				<RadzenRow RowGap="0">
					<RadzenColumn SizeSM="8">
						<RadzenText TextStyle="TextStyle.Overline" title="@answer.Factor.Description">@answer.Factor.Name [@answer.Factor.Strategy]</RadzenText>
					</RadzenColumn>
					<RadzenColumn SizeSM="4">
						<RadzenBadge IsPill="true" Variant="Variant.Outlined" BadgeStyle="GetBadgeStyle(answer)" Text="@GetBadgeLabel(answer)" class="float-end" Style="width:30px" />
					</RadzenColumn>
				</RadzenRow>
			</RadzenStack>
		}
	}
</RadzenStack>


@code {
	[Parameter]
	public Asset Asset { get; set; }
	[Inject]
	IAssets Assets { get; set; }
	[Inject]
	NotificationService NotificationService { get; set; }

	string GetInvestidor10URL(Asset asset)
	{
		var urlType = asset.Type switch
		{
			AssetType.Acoes => "acoes",
			AssetType.FII => "fiis",
			AssetType.BDR => "bdrs",
			_ => null
		};
		return $"https://investidor10.com.br/{urlType}/{asset.Ticker}#checklist";
	}

	protected override void OnInitialized()
	{
		UpdateData();
		base.OnInitialized();
	}
	void UpdateData()
	{
		Points = Asset.AssetEvaluationPercentage();
		StateHasChanged();
	}
	void SaveEvaluations()
	{
		Assets.SaveEvaluation(Asset);
		NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Asset Evaluated", Detail = "Asset Evaluation saved.", Duration = 4000 });
	}
	public double Points { get; set; }

	BadgeStyle GetBadgeStyle(AssetDecisionFactor factor)
	{
		switch (factor.Points(Asset))
		{
			case 1:
				return BadgeStyle.Primary;
			case -1:
				return BadgeStyle.Danger;
			default:
				return BadgeStyle.Dark;
		}
	}
	string GetBadgeLabel(AssetDecisionFactor factor)
	{
		switch (factor.Points(Asset))
		{
			case 1:
				return "+1";
			case -1:
				return "-1";
			default:
				return "0";
		}
	}
}