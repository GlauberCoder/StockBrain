@page "/ShoppingCart"
@using Radzen.Blazor
@using StockBrain.Domain.Models
@using StockBrain.Infra.Repositories.Abstractions
@using StockBrain.Services.Abstrations
@using StockBrain.WebApp.Components.Pages.AssetPages
@using StockBrain.WebApp.Models
@rendermode InteractiveServer
<SBLoading IsLoading="@IsLoading">
	<RadzenRow>
		<RadzenColumn Size="12">
			<RadzenCard Variant="@Variant.Filled">
				<RadzenStack Gap="0">
					<RadzenRow RowGap="0">
						<RadzenColumn Size="6">Var</RadzenColumn>
						<RadzenColumn Size="6">Fix</RadzenColumn>
					</RadzenRow>
				</RadzenStack>
				<RadzenStack Gap="0">
					<RadzenRow RowGap="0">
						<SBLabelCol Size="2" Title="QTD" Text="@AssetMovements.Where(m => m.Selected).Sum(m => m.Model.Quantity).ToString()" />
						<SBLabelCol Size="2" Title="Valor" Text="@AssetMovements.Where(m => m.Selected).Sum(m => m.Model.Investment).MonetaryFormat()" />
						<SBLabelCol Size="2" Title="Selecionados" Text="@($"{AssetMovements.Where(m => m.Selected).Count()} / {AssetMovements.Count()}")" />
						<SBLabelCol Size="4" Title="Valor" Text="@BondMovements.Where(m => m.Selected).Sum(m => m.Model.Value).MonetaryFormat()" />
						<SBLabelCol Size="2" Title="Selecionados" Text="@($"{BondMovements.Where(m => m.Selected).Count()} / {BondMovements.Count()}")" />
					</RadzenRow>
				</RadzenStack>
			</RadzenCard>
		</RadzenColumn>
		<RadzenColumn Size="12">
			<RadzenCard Variant="@Variant.Filled">
				<RadzenRow>
					<RadzenColumn Size="8">
						<SBSelectorBroker @bind-Entity="Broker" />
						<RadzenButton Variant="Variant.Outlined" Click=@SetBrokerAndSave Text="Definir Corretora" Disabled="(Broker == null)" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" class="rz-mr-2 rz-mt-2 rz-ml-2" />
					</RadzenColumn>
					<RadzenColumn Size="4">

						<RadzenButton Variant="Variant.Outlined" Click=@ConfirmSelected Text="Confirmar" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Disabled="@ConfirmDisabled" class="float-end rz-mr-2 rz-mt-2" />
						<RadzenButton Variant="Variant.Outlined" Click=@RemoveSelected Text="Cancelar" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" Disabled="@CancelDisabled" class="float-end rz-mr-2 rz-mt-2" />
					</RadzenColumn>
				</RadzenRow>
			</RadzenCard>
		</RadzenColumn>
		<RadzenColumn Size="6">
			<RadzenCard Variant="@Variant.Filled">
				<RadzenRow>
					<RadzenColumn Size="12">
						<RadzenButton Click=@AddVarItem Icon="add" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-10 float-end" />
						<RadzenButton Click=@ChangeShowCsv Icon="csv" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-10 float-end rz-mr-2" />
					</RadzenColumn>
				</RadzenRow>
				@if (ShowCsv)
				{
					<RadzenRow>
						<RadzenColumn Size="12">
							<RadzenTextArea @bind-Value=@Csv Style="width:100%;" class="rz-mt-2" Placeholder="TIKER;QTD;VALOR UNITARIO;VALOR TOTAL"></RadzenTextArea>
							<RadzenButton Variant="Variant.Outlined" Click=@UpdateFromCsv Text="Update" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Disabled="@ConfirmDisabled" class="float-end rz-mr-2 rz-mt-2" />
						</RadzenColumn>
					</RadzenRow>
				}
				<RadzenRow AlignItems="AlignItems.Center">
					<RadzenColumn Size="1"></RadzenColumn>
					<RadzenColumn Size="2">Ticker</RadzenColumn>
					<RadzenColumn Size="2">Corretora</RadzenColumn>
					<RadzenColumn Size="2">QTD</RadzenColumn>
					<RadzenColumn Size="2">Aporte</RadzenColumn>
				</RadzenRow>
				<hr />
				@foreach (var item in AssetMovements)
				{
					<RadzenRow AlignItems="AlignItems.Center" class="rz-mt-1">
						<RadzenColumn Size="1"><RadzenCheckBox @bind-Value=item.Selected /></RadzenColumn>
						<RadzenColumn Size="2"><RadzenButton Variant="Variant.Text" Click=@(args => Dialogs.Asset(item.Model.Asset)) Text="@item.Model.Asset.Ticker" ButtonStyle="ButtonStyle.Primary" /></RadzenColumn>
						<RadzenColumn Size="2"><RadzenText TextStyle="TextStyle.Body1">@item.Model.Broker?.Name</RadzenText></RadzenColumn>
						<RadzenColumn Size="2"><RadzenNumeric TextAlign="TextAlign.End" @bind-Value="@item.Model.Quantity" /></RadzenColumn>
						<RadzenColumn Size="2"><RadzenNumeric TextAlign="TextAlign.End" Format="c" @bind-Value="@item.Model.Investment" /></RadzenColumn>
						<RadzenColumn Size="2">
							<a href="@GetRicoURL(item.Model.Asset)" target="_blank" class="rz-mx-2 float-end rz-mt-5">
								<RadzenButton Variant="Variant.Outlined" Text="Rico" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" class="float-end" />
							</a>
						</RadzenColumn>
					</RadzenRow>
				}
			</RadzenCard>
		</RadzenColumn>
		<RadzenColumn Size="6">
			<RadzenCard Variant="@Variant.Filled">
				<RadzenRow>
					<RadzenColumn Size="12">
						<RadzenButton Click=@AddFixItem Icon="add" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-10 float-end" />
					</RadzenColumn>
				</RadzenRow>
				<RadzenRow AlignItems="AlignItems.Center">
					<RadzenColumn Size="1"></RadzenColumn>
					<RadzenColumn Size="1">Tipo</RadzenColumn>
					<RadzenColumn Size="1">Indice</RadzenColumn>
					<RadzenColumn Size="1">Taxa</RadzenColumn>
					<RadzenColumn Size="1">Corretora</RadzenColumn>
					<RadzenColumn Size="3">Emissor</RadzenColumn>
					<RadzenColumn Size="2">Vencimento</RadzenColumn>
					<RadzenColumn Size="2">Valor</RadzenColumn>
				</RadzenRow>
				<hr />
				@foreach (var item in BondMovements)
				{
					<RadzenRow AlignItems="AlignItems.Center" class="rz-mt-1">
						<RadzenColumn Size="1"><RadzenCheckBox @bind-Value=item.Selected /></RadzenColumn>
						<RadzenColumn Size="1">@item.Model.Type</RadzenColumn>
						<RadzenColumn Size="1">@item.Model.Index</RadzenColumn>
						<RadzenColumn Size="1">@item.Model.Tax.PercentageFormat(5)</RadzenColumn>
						<RadzenColumn Size="1">@item.Model.Broker.Name</RadzenColumn>
						<RadzenColumn Size="3">@item.Model.Issuer.Name</RadzenColumn>
						<RadzenColumn Size="2">@item.Model.Expiration</RadzenColumn>
						<RadzenColumn Size="2">@item.Model.Value.MonetaryFormat()</RadzenColumn>
					</RadzenRow>
				}
			</RadzenCard>
		</RadzenColumn>
	</RadzenRow>
</SBLoading>


@code {
	[Inject]
	Dialogs Dialogs { get; set; }
	[Inject]
	Context Context { get; set; }

	[Inject]
	IAssetMovements Assets { get; set; }

	[Inject]
	IBondMovements Bonds { get; set; }

	[Inject]
	IAssetMovementFromCSVUpdater MovementFromCSVUpdater { get; set; }

	IEnumerable<SelectableItem<AssetMovement>> AssetMovements { get; set; } = new List<SelectableItem<AssetMovement>>();
	IEnumerable<SelectableItem<BondMovement>> BondMovements { get; set; } = new List<SelectableItem<BondMovement>>();
	Broker Broker { get; set; }
	string Csv { get; set; }
	bool ShowCsv { get; set; } = false;
	bool ConfirmDisabled => CancelDisabled || AssetMovements.Any(m => m.Selected && m.Model.Broker == null);
	bool CancelDisabled => (!SelectedAssets().Any() && !SelectedBonds().Any());
	private bool IsLoading { get; set; }
	string GetRicoURL(Asset asset)
		=> $"https://arealogada.rico.com.vc/renda-variavel/ordens/{asset.Ticker}/comprar";

	void ChangeShowCsv()
	{
		ShowCsv = !ShowCsv;
		StateHasChanged();
	}
	void ConfirmSelected()
	{
		Dialogs.MovementConfirmation(SelectedAssets(), SelectedBonds());

	}
	void RemoveSelected()
	{
		IsLoading = true;
		InvokeAsync(StateHasChanged).ContinueWith(r =>
		{
			Assets.Delete(SelectedAssets());
			Bonds.Delete(SelectedBonds());
		}).ContinueWith(r =>
		{
			ReloadData(false);
		});
	}
	void AddVarItem()
	{
		Dialogs.CartAddVar(ReloadAndUpdateState);

	}
	void AddFixItem()
	{
		Dialogs.CartAddFix(ReloadAndUpdateState);

	}
	void SetBrokerAndSave()
	{
		var assets = SelectedAssets();
		foreach (var asset in assets)
			asset.Broker = Broker;

		var bonds = SelectedBonds();
		foreach (var bond in bonds)
			bond.Broker = Broker;

		Assets.Save(assets);
		Bonds.Save(bonds);

	}
	protected override async Task OnInitializedAsync()
	{
		ReloadData(true);
	}
	void ReloadData(bool firstLoad)
	{
		IsLoading = true;
		InvokeAsync(StateHasChanged).ContinueWith(r =>
		{
			AssetMovements = ReloadData(firstLoad, Assets.All(), SelectedAssets());
			BondMovements = ReloadData(firstLoad, Bonds.All(), SelectedBonds());
			IsLoading = false;
			InvokeAsync(StateHasChanged);
		});
	}
	IEnumerable<SelectableItem<T>> ReloadData<T>(bool firstLoad, IEnumerable<T> entities, IEnumerable<T> selectedItens) where T : BaseEntity
	{
		var selected = new HashSet<string>(selectedItens?.Select(m => m.GUID) ?? new List<string>());
		return entities.Select(m => new SelectableItem<T>(m, firstLoad || selected.Contains(m.GUID))).ToList();
	}
	IEnumerable<AssetMovement> SelectedAssets() => AssetMovements?.Where(m => m.Selected).Select(m => m.Model);
	IEnumerable<BondMovement> SelectedBonds() => BondMovements?.Where(m => m.Selected).Select(m => m.Model);

	void ReloadAndUpdateState()
	{
		ReloadData(false);
		StateHasChanged();

	}
	void UpdateFromCsv()
	{
		MovementFromCSVUpdater.Update(Csv, AssetMovements.Select(m => m.Model));
		Csv = string.Empty;
		ShowCsv = false;
		StateHasChanged();
	}
}