@using StockBrain.Domain.Abstractions
@using StockBrain.Domain.Models
@using StockBrain.Domain.Models.Enums
@using StockBrain.Domain.Models.Model
@using StockBrain.Domain.Models.Extensions;



<RadzenRow class="rz-mt-4" AlignItems="AlignItems.Center">
	<RadzenColumn Size="12">
		<RadzenButton Click=@Save Text="Salvar" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" class="float-end" />
		<RadzenButton Click=@Reset Text="Resetar" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" class="float-end rz-mr-2" />
		<RadzenButton Click=@Recalc Text="Calcular" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" class="float-end rz-mr-2" />
	</RadzenColumn>
</RadzenRow>
@foreach (var config in Configs)
{
	<RadzenRow AlignItems="AlignItems.End" Wrap="FlexWrap.Wrap" Gap="1rem" class="rz-mt-4">
		<RadzenColumn Size="4">
			<RadzenCheckBox @bind-Value=@config.Value.Invest Name="@config.Value.Type.ToString()" />
			<RadzenLabel Text="@config.Value.Type.ToString()" Component="@config.Value.Type.ToString()" class="rz-ms-2" />
		</RadzenColumn>
		<RadzenColumn Size="4">
			<RadzenFormField Text="Alvo" Variant="Variant.Text" Style="width: 100%;">
				<RadzenNumeric Format="p" @bind-Value="@config.Value.Target" Disabled="@(!config.Value.Invest)" />
			</RadzenFormField>
		</RadzenColumn>
		@if (config.Value.Type.Category() == AssetCategory.Var)
		{
			<RadzenColumn Size="4">
				<RadzenFormField Text="Quantidade" Variant="Variant.Text" Style="width: 100%;">
					<RadzenNumeric @bind-Value="@config.Value.Amount" Disabled="@(!config.Value.Invest)" />
				</RadzenFormField>
			</RadzenColumn>
		}
	</RadzenRow>
}


@code {
	[Parameter]
	public Portfolio Portfolio { get; set; }
	[Parameter]
	public IDictionary<AssetType, InvestmentRecommendationTypeConfig> Configs { get; set; }
	[Parameter]
	public Action<IDictionary<AssetType, InvestmentRecommendationTypeConfig>> OnSave { get; set; }
	[Inject]
	IInvestmentRecommenderConfigCalculator ConfigCalculator { get; set; }
	[Inject]
	Dialogs Dialogs { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}
	void Save()
	{
		Dialogs.Close();
		OnSave(Configs);
	}
	void Reset()
	{
		Configs = ConfigCalculator.Calc(Portfolio);
		StateHasChanged();
	}
	void Recalc()
	{
		Configs = ConfigCalculator.Calc(Configs);
		StateHasChanged();
	}
}
