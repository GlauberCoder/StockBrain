@page "/infoUpdate"
@using StockBrain.Services
@using StockBrain.Services.Abstrations
@rendermode InteractiveServer
<RadzenCard Variant="@Variant.Filled">
	<RadzenRow>
		<RadzenColumn Size="6">
			<RadzenTextBox Placeholder="Filtro separado por vírgula ex: XPML11, HGLG11, RADL3, ROXO34" Style="width:800px;" @bind-Value=filter />
		</RadzenColumn>
		<RadzenColumn Size="6">
			<RadzenButton Variant="Variant.Outlined" Click=@UpdatInfos IsBusy="Updating" Text="Atualizarc Infos" BusyText="Carregando..." ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" class="float-end rz-mr-2 rz-mt-2" />
			<RadzenButton Variant="Variant.Outlined" Click=@UpdatePrices IsBusy="Updating" Text="Atualizar Preços" BusyText="Carregando..." ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" class="float-end rz-mr-2 rz-mt-2" />
		</RadzenColumn>
	</RadzenRow>
</RadzenCard>

<RadzenDataGrid PagerHorizontalAlign="HorizontalAlign.Left"Data="@Status" ColumnWidth="300px">
	<Columns>
		<RadzenDataGridColumn Title="ticker" Frozen="true" Sortable="true" Filterable="true" Width="80px" TextAlign="TextAlign.Center">
			<Template Context="status">
				@status.Key
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn Title="Status" Frozen="true" Sortable="true" Filterable="true" Width="80px" TextAlign="TextAlign.Center">
			<Template Context="status">
				@if (status.Value.Done)
				{
					<RadzenIcon Icon="@(status.Value.HasError ? "error" : "check_circle")" IconStyle="@(status.Value.HasError ? IconStyle.Danger : IconStyle.Primary)" />
				}
				else
				{
					<RadzenIcon Icon="pending" IconStyle="IconStyle.Info" />
				}
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn Title="Erro" Frozen="true" Sortable="true" Filterable="true" Width="80px" TextAlign="TextAlign.Center">
			<Template Context="status">
				@status.Value.ErrorMessage
			</Template>
		</RadzenDataGridColumn>

	</Columns>
</RadzenDataGrid>

@code {
	[Inject]
	IAssetInfoUpdater InfoUpdater { get; set; }
	[Inject]
	IPriceUpdater PriceUpdater { get; set; }
	bool Updating = false;
	string filter = "";
	IDictionary<string, IAssetInfoUpdateStatus> Status = new Dictionary<string, IAssetInfoUpdateStatus>();

	void UpdatInfos()
	{
		Updating = true;
		InvokeAsync(StateHasChanged).ContinueWith(r =>
		{
			var filters = string.IsNullOrWhiteSpace(filter) ? null : filter.Split(',').Select(f => f.Trim());
			InfoUpdater.UpdateAll((status, finished) =>
			{
				Status = status;
				Updating = !finished;
				InvokeAsync(StateHasChanged);

			}, filters);
		});
	}
	void UpdatePrices()
	{
		Updating = true;
		InvokeAsync(StateHasChanged).ContinueWith(r =>
		{
			var filters = string.IsNullOrWhiteSpace(filter) ? null : filter.Split(',').Select(f => f.Trim());
			PriceUpdater.Update((status, finished) =>
			{
				Status = status;
				Updating = !finished;
				InvokeAsync(StateHasChanged);
			}, filters);
		});
	}
}
