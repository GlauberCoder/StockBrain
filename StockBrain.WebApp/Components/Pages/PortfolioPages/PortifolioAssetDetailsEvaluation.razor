@using StockBrain.Domain.Abstractions
@using StockBrain.Domain.Models
@using StockBrain.Infra.Repositories.Abstractions
@using StockBrain.WebApp.Components.Pages.AssetPages



<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem">
	<RadzenRow>
		<RadzenColumn Size="2">
			<RadzenText TextStyle="TextStyle.H6">Score</RadzenText>
		</RadzenColumn>
		<RadzenColumn Size="1">
			<RadzenText TextStyle="TextStyle.H6" class="float-end">@Asset.Asset.Score.Value / @Asset.Asset.Score.Total</RadzenText>
		</RadzenColumn>
		<RadzenColumn Size="8">
			<RadzenProgressBar Value=@PointPercentage.ToPercentage() ShowValue="false" Style="--rz-progressbar-height: 1rem;" />
		</RadzenColumn>
		<RadzenColumn Size="1">
			<RadzenText TextStyle="TextStyle.H6" class="float-end">@PointPercentage.PercentageFormat()</RadzenText>
		</RadzenColumn>
	</RadzenRow>
	@foreach (var group in Answers.GroupBy(a => a.Factor.Group))
	{
		<hr />
		var total = group.Count();
		var grade = Math.Max(group.Sum(g => g.Answer ? 1 : -1),0);
		var percentage = (double)grade / (double)total;
		<RadzenRow>
			<RadzenColumn Size="2">
				<RadzenText TextStyle="TextStyle.H6">@group.Key</RadzenText>
			</RadzenColumn>
			<RadzenColumn Size="1">
				<RadzenText TextStyle="TextStyle.H6" class="float-end">@grade / @total</RadzenText>
			</RadzenColumn>
			<RadzenColumn Size="8">
				<RadzenProgressBar Value=@percentage.ToPercentage() ShowValue="false" Style="--rz-progressbar-height: 1rem;" />
			</RadzenColumn>
			<RadzenColumn Size="1">
				<RadzenText TextStyle="TextStyle.H6" class="float-end">@percentage.PercentageFormat()</RadzenText>
			</RadzenColumn>
		</RadzenRow>

		@foreach (var answer in group.OrderBy(a => a.Factor.Name))
		{
			<RadzenStack Gap="0">
				<RadzenRow RowGap="0">
					<RadzenColumn SizeSM="8">
						<RadzenText TextStyle="TextStyle.Overline" title="@answer.Factor.Description">@answer.Factor.Name</RadzenText>
						<RadzenBadge IsPill="true" Variant="Variant.Outlined" BadgeStyle="GetBadgeStyle(answer.Answer)" Text="@GetBadgeLabel(answer.Answer)" class="rz-ml-5" Style="width:30px" />
					</RadzenColumn>
				</RadzenRow>
			</RadzenStack>
		}
	}
</RadzenStack>

@code {
	[Inject]
	IDecisionFactorAnswerSetter Factors { get; set; }
	[Inject]
	IAssetInfos AssetInfos { get; set; }
	[Inject]
	IDecisionFactors DecisionFactors { get; set; }
	[Parameter]
	public PortfolioAssetDetail Asset { get; set; }
	public IEnumerable<DecisionFactorAnswer> Answers { get; set; } = Enumerable.Empty<DecisionFactorAnswer>();
	public double PointPercentage => Asset.Asset.Score.Proportion;
	BadgeStyle GetBadgeStyle(bool answer)
	{
		return answer ? BadgeStyle.Primary : BadgeStyle.Danger;
	}
	string GetBadgeLabel(bool answer)
	{
		return answer ? "+1" : "-1";
	}
	protected override async Task OnInitializedAsync()
	{
		var asset = Asset.Asset.Asset;
		Answers = Factors.Get(Asset.Asset, AssetInfos.By(asset.Type, asset.Ticker), DecisionFactors.All());
	}
}
